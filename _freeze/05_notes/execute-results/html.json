{
  "hash": "a611ab5ef2ca5a8b18e1f5948e35ee6a",
  "result": {
    "markdown": "# Notes {.unnumbered}\n\n\n## Introduction\n\n:::{.callout-note}\nThis is a long chapter, these notes are intended as a tour of main ideas! \n:::\n\n![Panda bus tour!](images/pandabus.jpg){width=300px}\n\n* Pandas is a major tool in Python data analysis\n\n* Works with Numpy, adding support for tabular / heterogenous data\n\n## Import conventions: \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n## Panda's primary data structures\n\n* Series: One dimensional object containing a sequence of values of the same type.\n\n* DataFrame: Tabular data, similar (and inspired by) R dataframe.\n\n* Other structures will be introduced as they arise, e.g. Index and Groupby objects.\n\n### Series\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nobj = pd.Series([4,7,-4,3], index = [\"A\",\"B\",\"C\",\"D\"])\nobj\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nA    4\nB    7\nC   -4\nD    3\ndtype: int64\n```\n:::\n:::\n\n\nThe `index` is optional, if not specified it will default to 0 through N-1 \n\n#### Selection\n\nSelect elements or sub-Series by labels, sets of labels, boolean arrays ...\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nobj['A']\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n4\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nobj[['A','C']]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nA    4\nC   -4\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nobj[obj > 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nA    4\nB    7\ndtype: int64\n```\n:::\n:::\n\n\n#### Other things you can do\n\n* Numpy functions and Numpy-like operations work as expected:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nobj*3\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nA    12\nB    21\nC   -12\nD     9\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nnp.exp(obj)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nA      54.598150\nB    1096.633158\nC       0.018316\nD      20.085537\ndtype: float64\n```\n:::\n:::\n\n\n* Series can be created from and converted to a dictionary\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nobj.to_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n{'A': 4, 'B': 7, 'C': -4, 'D': 3}\n```\n:::\n:::\n\n\n* Series can be converted to numpy array:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nobj.to_numpy()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([ 4,  7, -4,  3], dtype=int64)\n```\n:::\n:::\n\n\n### DataFrame\n\n* Represents table of data\n\n* Has row index *index* and column index *column*\n\n* Common way to create is from a dictionary, but see *Table 5.1* for more!\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntest = pd.DataFrame({\"cars\":['Chevy','Ford','Dodge','BMW'],'MPG':[14,15,16,12], 'Year':[1979, 1980, 2001, 2020]})\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cars</th>\n      <th>MPG</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Chevy</td>\n      <td>14</td>\n      <td>1979</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ford</td>\n      <td>15</td>\n      <td>1980</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Dodge</td>\n      <td>16</td>\n      <td>2001</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BMW</td>\n      <td>12</td>\n      <td>2020</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* If you want a non-default index, it can be specified just like with Series.\n\n* `head(n)` / `tail(n)` - return the first / last n rows, 5 by default\n\n#### Selecting \n\n* Can retrieve columns or sets of columns by using `obj[...]`:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntest['cars']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0    Chevy\n1     Ford\n2    Dodge\n3      BMW\nName: cars, dtype: object\n```\n:::\n:::\n\n\nNote that we got a `Series` here.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntest[['cars','MPG']]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cars</th>\n      <th>MPG</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Chevy</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ford</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Dodge</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BMW</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* Dot notation can also be used (`test.cars`) as long as the column names are valid identifiers\n\n* *Rows* can be retrieved with `iloc[...]` and `loc[...]`:\n\n   - `loc` retrieves by index\n\n   - `iloc` retrieves by position. \n\n \n#### Modifying / Creating Columns\n\n* Columns can be modified (and created) by assignment:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntest['MPG^2'] = test['MPG']**2\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cars</th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Chevy</td>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ford</td>\n      <td>15</td>\n      <td>1980</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Dodge</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BMW</td>\n      <td>12</td>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* `del` keyword can be used to drop columns, or `drop` method can be used to do so non-destructively\n\n\n### Index object \n\n* Index objects are used for holding axis labels and other metadata\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntest.index\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nRangeIndex(start=0, stop=4, step=1)\n```\n:::\n:::\n\n\n* Can change the index, in this case replacing the default:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Create index from one of the columns\ntest.index = test['cars']  \n\n # remove 'cars' column since i am using as an index now.  s\ntest=test.drop('cars', axis = \"columns\")  # or axis  = 1\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>Ford</th>\n      <td>15</td>\n      <td>1980</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>Dodge</th>\n      <td>16</td>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>BMW</th>\n      <td>12</td>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* Note the `axis` keyword argument above, many DataFrame methods use this.\n\n* Above I changed a column into an index.  Often you want to go the other way, this can be done with `reset_index`: \n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntest.reset_index()  # Note this doesn't actually change test\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cars</th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Chevy</td>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ford</td>\n      <td>15</td>\n      <td>1980</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Dodge</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BMW</td>\n      <td>12</td>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* Columns are an index as well:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntest.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nIndex(['MPG', 'Year', 'MPG^2'], dtype='object')\n```\n:::\n:::\n\n\n* Indexes act like immutable sets,  see *Table 5.2* in book for Index methods and properties\n\n## Essential Functionality\n\n### Reindexing and dropping\n\n* `reindex` creats a *new* object with the values arranged according to the new index.  Missing values are used if necessary, or you can use optional fill methods.  You can use `iloc` and `loc` to reindex as well.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ns = pd.Series([1,2,3,4,5], index = list(\"abcde\"))\ns2 = s.reindex(list(\"abcfu\"))  #  not a song by GAYLE \ns2\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\na    1.0\nb    2.0\nc    3.0\nf    NaN\nu    NaN\ndtype: float64\n```\n:::\n:::\n\n\n* Missing values and can be tested for with `isna` or `notna` methods\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\npd.isna(s2)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\na    False\nb    False\nc    False\nf     True\nu     True\ndtype: bool\n```\n:::\n:::\n\n\n* `drop` , illustrated above can drop rows or columns. In addition to using `axis` you can use `columns` or `index`. Again these make copies.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntest.drop(columns = 'MPG')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>Ford</th>\n      <td>1980</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>Dodge</th>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>BMW</th>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntest.drop(index = ['Ford', 'BMW'])\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>Dodge</th>\n      <td>16</td>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Indexing, Selection and Filtering\n\n#### Series\n* For Series, indexing is similar to Numpy, except you can use the index as well as integers.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nobj = pd.Series(np.arange(4.), index=[\"a\", \"b\", \"c\", \"d\"])\nobj[0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\na    0.0\nb    1.0\nc    2.0\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nobj['a':'c']\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\na    0.0\nb    1.0\nc    2.0\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nobj[obj<2]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\na    0.0\nb    1.0\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nobj[['a','d']]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\na    0.0\nd    3.0\ndtype: float64\n```\n:::\n:::\n\n\n* *However*, preferred way is to use `loc` for selection by *index* and `iloc` for selection by position. This is to avoid the issue where the `index` is itself integers.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nobj.loc[['a','d']]\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\na    0.0\nd    3.0\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nobj.iloc[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n1.0\n```\n:::\n:::\n\n\n:::{.callout-note}\nNote if a range or a set of indexes is used, a Series is returned. If a single item is requested, you get just that item.\n:::\n\n#### DataFrame\n\n* Selecting with `df[...]` for a DataFrame retrieves one or more columns as we have seen, if you select a single column you get a Series\n\n* There are some special cases, indexing with a boolean selects *rows*, as does selecting with a slice:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ntest[0:1]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ntest[test['MPG'] < 15]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>BMW</th>\n      <td>12</td>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* `iloc` and `loc` can be used to select rows as illustrated before, but can also be used to select columns or subsets of rows/columns\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ntest.loc[:,['Year','MPG']]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>MPG</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>1979</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>Ford</th>\n      <td>1980</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>Dodge</th>\n      <td>2001</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>BMW</th>\n      <td>2020</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ntest.loc['Ford','MPG']\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n15\n```\n:::\n:::\n\n\n* These work with slices and booleans as well!  The following says \"give me all the rows with MPG more then 15, and the columns starting from Year\"\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ntest.loc[test['MPG'] > 15, 'Year':]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Dodge</th>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* Indexing options are fully illustrated in the book and *Table 5.4* \n\n* Be careful with *chained indexing*:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ntest[test['MPG']> 15].loc[:,'MPG'] = 18\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\jryan\\AppData\\Local\\Temp\\ipykernel_13388\\2484144822.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  test[test['MPG']> 15].loc[:,'MPG'] = 18\n```\n:::\n:::\n\n\nHere we are assigning to a 'slice', which is probably not what is intended. You will get  a warning and a recommendation to fix it by using one `loc`:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ntest.loc[test['MPG']> 15 ,'MPG'] = 18\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Chevy</th>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>Ford</th>\n      <td>15</td>\n      <td>1980</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>Dodge</th>\n      <td>18</td>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>BMW</th>\n      <td>12</td>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-tip}\n### Rule of Thumb\n\nAvoid chained indexing when doing assignments\n:::\n\n### Arithmetic and Data Alignment\n\n* Pandas can make it simpler to work with objects that have different indexes, usually 'doing the right thing'\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ns1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=[\"a\", \"c\", \"d\", \"e\"])\ns2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1], index=[\"a\", \"c\", \"e\", \"f\", \"g\"])\ns1+s2\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\na    5.2\nc    1.1\nd    NaN\ne    0.0\nf    NaN\ng    NaN\ndtype: float64\n```\n:::\n:::\n\n\n* Fills can be specified by using methods:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ns1.add(s2, fill_value = 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\na    5.2\nc    1.1\nd    3.4\ne    0.0\nf    4.0\ng    3.1\ndtype: float64\n```\n:::\n:::\n\n\n* See *Table 5.5* for list of these methods.\n\n* You can also do arithmetic between *DataFrame*s and *Series* in a way that is similar to Numpy. \n\n### Function Application and Mapping\n\n* Numpy *ufuncs* also work with Pandas objects. \n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nframe = pd.DataFrame(np.random.standard_normal((4, 3)),\n                         columns=list(\"bde\"),\n                         index=[\"Utah\", \"Ohio\", \"Texas\", \"Oregon\"])\nframe\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>b</th>\n      <th>d</th>\n      <th>e</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Utah</th>\n      <td>0.798548</td>\n      <td>-1.455476</td>\n      <td>0.507618</td>\n    </tr>\n    <tr>\n      <th>Ohio</th>\n      <td>-0.405775</td>\n      <td>-0.132380</td>\n      <td>-0.563721</td>\n    </tr>\n    <tr>\n      <th>Texas</th>\n      <td>-0.404526</td>\n      <td>0.703566</td>\n      <td>1.661291</td>\n    </tr>\n    <tr>\n      <th>Oregon</th>\n      <td>-0.359775</td>\n      <td>-0.450894</td>\n      <td>-0.712254</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nnp.abs(frame)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>b</th>\n      <th>d</th>\n      <th>e</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Utah</th>\n      <td>0.798548</td>\n      <td>1.455476</td>\n      <td>0.507618</td>\n    </tr>\n    <tr>\n      <th>Ohio</th>\n      <td>0.405775</td>\n      <td>0.132380</td>\n      <td>0.563721</td>\n    </tr>\n    <tr>\n      <th>Texas</th>\n      <td>0.404526</td>\n      <td>0.703566</td>\n      <td>1.661291</td>\n    </tr>\n    <tr>\n      <th>Oregon</th>\n      <td>0.359775</td>\n      <td>0.450894</td>\n      <td>0.712254</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* `apply` can be used to apply a function on 1D arrays to each column or row:\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nframe.apply(np.max, axis = 'rows') #'axis' is optional here, default is rows\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\nb    0.798548\nd    0.703566\ne    1.661291\ndtype: float64\n```\n:::\n:::\n\n\nApplying accross columns is common, especially to combine different columns in some way:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nframe['max'] = frame.apply(np.max, axis = 'columns')\nframe\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>b</th>\n      <th>d</th>\n      <th>e</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Utah</th>\n      <td>0.798548</td>\n      <td>-1.455476</td>\n      <td>0.507618</td>\n      <td>0.798548</td>\n    </tr>\n    <tr>\n      <th>Ohio</th>\n      <td>-0.405775</td>\n      <td>-0.132380</td>\n      <td>-0.563721</td>\n      <td>-0.132380</td>\n    </tr>\n    <tr>\n      <th>Texas</th>\n      <td>-0.404526</td>\n      <td>0.703566</td>\n      <td>1.661291</td>\n      <td>1.661291</td>\n    </tr>\n    <tr>\n      <th>Oregon</th>\n      <td>-0.359775</td>\n      <td>-0.450894</td>\n      <td>-0.712254</td>\n      <td>-0.359775</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* Many more examples of this in the book.\n\n\n### Sorting and Ranking\n\n* `sort_index` will sort with the index (on either axis for *DataFrame*)\n* `sort_values` is used to sort by values or a particular column\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ntest.sort_values('MPG')\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MPG</th>\n      <th>Year</th>\n      <th>MPG^2</th>\n    </tr>\n    <tr>\n      <th>cars</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BMW</th>\n      <td>12</td>\n      <td>2020</td>\n      <td>144</td>\n    </tr>\n    <tr>\n      <th>Chevy</th>\n      <td>14</td>\n      <td>1979</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>Ford</th>\n      <td>15</td>\n      <td>1980</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>Dodge</th>\n      <td>18</td>\n      <td>2001</td>\n      <td>256</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* `rank` will assign ranks from on through the number of data points.\n\n\n## Summarizing and Computing Descriptive Statistics\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\ndf = pd.DataFrame([[1.4, np.nan], [7.1, -4.5],\n                      [np.nan, np.nan], [0.75, -1.3]],\n                      index=[\"a\", \"b\", \"c\", \"d\"],\n                      columns=[\"one\", \"two\"])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>one</th>\n      <th>two</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>a</th>\n      <td>1.40</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>b</th>\n      <td>7.10</td>\n      <td>-4.5</td>\n    </tr>\n    <tr>\n      <th>c</th>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>d</th>\n      <td>0.75</td>\n      <td>-1.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSome Examples:\n\n\nSum over rows:\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ndf.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\none    9.25\ntwo   -5.80\ndtype: float64\n```\n:::\n:::\n\n\nSum over columns:\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\n# Sum Rows\ndf.sum(axis=\"columns\")\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\na    1.40\nb    2.60\nc    0.00\nd   -0.55\ndtype: float64\n```\n:::\n:::\n\n\nExtremely useful is `describe`:\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>one</th>\n      <th>two</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.083333</td>\n      <td>-2.900000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.493685</td>\n      <td>2.262742</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.750000</td>\n      <td>-4.500000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.075000</td>\n      <td>-3.700000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.400000</td>\n      <td>-2.900000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4.250000</td>\n      <td>-2.100000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.100000</td>\n      <td>-1.300000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Book chapter contains *many* more examples and a full list of summary statistics and related methods.**\n \n## Summary\n\n* Primary Panda's data structures:\n\n    - Series\n\n    - DataFrame\n\n* Many ways to access and transform these objects.  Key ones are:\n\n   - `[]` : access an element(s) of a `Series` or columns(s) of a `DataFrame`\n\n   - `loc[r ,c]` : access a row / column / cell by the `index`.\n\n   - `iloc[i, j]` : access ar row / column / cell by the integer position.\n\n* [Online reference.](https://pandas.pydata.org/docs/reference/index.html)\n\n:::{.callout-tip}\n## Suggestion\nWork though the chapter's code and try stuff!\n:::\n\n## References\n\n* [Chapter's code.](https://nbviewer.org/github/pydata/pydata-book/blob/3rd-edition/ch05.ipynb)\n\n* [Panda reference.](https://pandas.pydata.org/docs/reference/index.html)\n\n## Next Chapter\n\n* Loading and writing data sets!\n\n",
    "supporting": [
      "05_notes_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}