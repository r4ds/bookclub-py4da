{
  "hash": "fef7b8c47b14425c8a2c0f849525c130",
  "result": {
    "markdown": "# 7. Data Cleaning and Preparation\n\n## Learning Objectives\n\n-   Know which tools to use for missing data\n-   Know how to filter out missing data\n-   Understand methods to fill in missing values\n-   Know when and how to transform data\n-   Know how to use certain `numpy` functions to handle outliers, permute, and take random samples\n-   Know how to manipulate strings\n-   Understand some useful methods for regular expressions\n-   Learn about some helpful methods in `pandas` to explore strings\n-   Understand how to handle categorical data more optimally\n\n------------------------------------------------------------------------\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\nfood = pd.read_csv(\"https://openmv.net/file/food-consumption.csv\")\n\nprint(food.head(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Country  Real coffee  Instant coffee  Tea  Sweetener  Biscuits  \\\n0  Germany           90              49   88       19.0      57.0   \n1    Italy           82              10   60        2.0      55.0   \n2   France           88              42   63        4.0      76.0   \n3  Holland           96              62   98       32.0      62.0   \n4  Belgium           94              38   48       11.0      74.0   \n\n   Powder soup  Tin soup  Potatoes  Frozen fish  ...  Apples  Oranges  \\\n0           51        19        21           27  ...      81       75   \n1           41         3         2            4  ...      67       71   \n2           53        11        23           11  ...      87       84   \n3           67        43         7           14  ...      83       89   \n4           37        23         9           13  ...      76       76   \n\n   Tinned fruit  Jam  Garlic  Butter  Margarine  Olive oil  Yoghurt  \\\n0            44   71      22      91         85         74     30.0   \n1             9   46      80      66         24         94      5.0   \n2            40   45      88      94         47         36     57.0   \n3            61   81      15      31         97         13     53.0   \n4            42   57      29      84         80         83     20.0   \n\n   Crisp bread  \n0           26  \n1           18  \n2            3  \n3           15  \n4            5  \n\n[5 rows x 21 columns]\n```\n:::\n:::\n\n\n*dataset: The relative consumption of certain food items in European and Scandinavian countries. The numbers represent the percentage of the population consuming that food type*\n\n## 7.1 Handling Missing Data\n\nSome things to note:\n\n-   ALL DESCRIPTIVE STATISTICS ON `pandas` OBJECTS EXLUDE MISSING DATA - BY DEFAULT\n\n-   `NaN` is used for missing values of type: `float64`\n\n-   Values like `NaN` are called *sentinel values*\n\n    -   a value that is not part of the input but indicates a special meaning; a signal value\n\n    -   `NaN` for missing integers, `-1` as a value to be inserted in a function that computes only non-negative integers, etc.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(food.Yoghurt.isna())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13     True\n14    False\n15    False\nName: Yoghurt, dtype: bool\n```\n:::\n:::\n\n\nWe do have an `NaN` in our midst!\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# descriptive stats\nprint(np.mean(food['Yoghurt']), \"\\n versus\", np.average(food['Yoghurt']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20.533333333333335 \n versus nan\n```\n:::\n:::\n\n\nDifferent results! Why?? According to `numpy` documentation:\n\n`np.mean` always calculates the arithmetic mean along a specified axis. The first argument requires the type to be of `int64` so will take the mean of those that fit. The average is taken over the flattened array by default. `np.average` computes the *weighted* average along the specified axis.\n\n`sum(food.Yoghurt) â€“> nan`\n\nfrom `average` source:\n\n\n            avg = avg_as_array = np.multiply(a, wgt,\n                              dtype=result_dtype).sum(axis, **keepdims_kw) / scl\n\nfrom `mean` source:\n\n    if type(a) is not mu.ndarray:\n            try:\n                mean = a.mean\n            except AttributeError:\n                pass\n            else:\n                return mean(axis=axis, dtype=dtype, out=out, **kwargs)\n\n        return _methods._mean(a, axis=axis, dtype=dtype,\n                              out=out, **kwargs)\n\nFYI: the `statistics` [module](https://docs.python.org/3/library/statistics.html?highlight=mean#statistics.mean) includes `mean()`\n\nSomething weird to consider....\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(np.nan == np.nan)\n\n# apparently, according to the floating-point standard, NaN is not equal to itself!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\nI digress...\n\n### Filtering Missing Data\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# method dropna\nprint(\"`dropna`: option to include `how = all` to only remove rows where every value is NaN \\n\",food.Yoghurt.dropna().tail(), \"\\n\",\n\"`fillna`: pass fillna a dictionary (fillna({1: 0.5, 2: 0})) to specify a different value for each column\\n\", food.Yoghurt.fillna(0).tail(), \"\\n\",\n\"`isna`\\n\", food.Yoghurt.isna().tail(), \"\\n\",\n\"`notna`\\n\", food.Yoghurt.notna().tail())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`dropna`: option to include `how = all` to only remove rows where every value is NaN \n 10     2.0\n11    11.0\n12     2.0\n14    16.0\n15     3.0\nName: Yoghurt, dtype: float64 \n `fillna`: pass fillna a dictionary (fillna({1: 0.5, 2: 0})) to specify a different value for each column\n 11    11.0\n12     2.0\n13     0.0\n14    16.0\n15     3.0\nName: Yoghurt, dtype: float64 \n `isna`\n 11    False\n12    False\n13     True\n14    False\n15    False\nName: Yoghurt, dtype: bool \n `notna`\n 11     True\n12     True\n13    False\n14     True\n15     True\nName: Yoghurt, dtype: bool\n```\n:::\n:::\n\n\n## 7.2 Data Transformation\n\n### Removing Duplicates\n\nCheck to see is duplicates exists:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfood.duplicated()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\n14    False\n15    False\ndtype: bool\n```\n:::\n:::\n\n\nIf you were to have duplicates, you can use the function `drop_duplicates()`.\n\n\\*NOTE: by default, `drop_duplicates` will only return the first observed value\\*\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndup_food = food[['Yoghurt','Yoghurt']]\ndup_food.columns = ['a','b']\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# index 11,12 are dropped - dont understand this at all\ndup_food.drop_duplicates()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30.0</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>57.0</td>\n      <td>57.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53.0</td>\n      <td>53.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20.0</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>31.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>11.0</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>6.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>13.0</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>48.0</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>16.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>3.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# index 6, 10 are dropped- also dont understand this at all\ndup_food.drop_duplicates(keep = 'last')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30.0</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>57.0</td>\n      <td>57.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53.0</td>\n      <td>53.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20.0</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>31.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>6.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>13.0</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>48.0</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>11.0</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>16.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>3.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# again 11,12 are dropped - still dont understand - help\ndup_food.drop_duplicates(subset=['a'])\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30.0</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>57.0</td>\n      <td>57.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53.0</td>\n      <td>53.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20.0</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>31.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>11.0</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>6.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>13.0</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>48.0</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>16.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>3.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Transforming Data with a Function or Mapping\n\nSince mapping a function over a series has already been covered, this section will only go over a few more helpful ways to map.\n\n-   define your own function - similar to how we would do in `apply` functions or `purrr:map()`\n\n\n    ::: {.cell execution_count=11}\n    ``` {.python .cell-code}\n    food_sub = food[:5][['Country','Yoghurt']]\n    country_yogurt = {\n      'Germany':'Quark',\n      'Italy':'Yomo',\n      'France':'Danone',\n      'Holland':'Campina',\n      'Belgium':'Activia'\n    }\n    ```\n    :::\n    \n    \n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndef get_yogurt(x):\n   return country_yogurt[x]\n\nfood_sub['Brand'] = food_sub['Country'].map(get_yogurt)\n\nfood_sub['Country'].map(get_yogurt)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0      Quark\n1       Yomo\n2     Danone\n3    Campina\n4    Activia\nName: Country, dtype: object\n```\n:::\n:::\n\n\n### Replace Values\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(\"using `replace`: \\n\", food_sub.replace([30],50), '\\n',\n\"using `replace` for more than one value: \\n\", food_sub.replace([30, 20],[50, 40]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nusing `replace`: \n    Country  Yoghurt    Brand\n0  Germany     50.0    Quark\n1    Italy      5.0     Yomo\n2   France     57.0   Danone\n3  Holland     53.0  Campina\n4  Belgium     20.0  Activia \n using `replace` for more than one value: \n    Country  Yoghurt    Brand\n0  Germany     50.0    Quark\n1    Italy      5.0     Yomo\n2   France     57.0   Danone\n3  Holland     53.0  Campina\n4  Belgium     40.0  Activia\n```\n:::\n:::\n\n\n### Renaming Axis Indices\n\nAs we've seen, standard indices are labelled as such:\n\n    >>> food_sub.index\n    RangeIndex(start=0, stop=5, step=1)\n\nThat can also be changed with the mapping of a function:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(food_sub.index.map(lambda x: x + 10))\nprint('or')\nprint(food_sub.index.map({0:'G', 1:'I', 2:'F', 3:'H', 4:'B'}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInt64Index([10, 11, 12, 13, 14], dtype='int64')\nor\nIndex(['G', 'I', 'F', 'H', 'B'], dtype='object')\n```\n:::\n:::\n\n\n### Discretization and Binning\n\nIt is common to convert continuous variables into discrete and group them. Let's group the affinity for yogurt into random bins:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nscale = [0, 20, 30, 50, 70]\n# reasonable, ok, interesting, why\n\npd.cut(food.Yoghurt, scale)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0     (20.0, 30.0]\n1      (0.0, 20.0]\n2     (50.0, 70.0]\n3     (50.0, 70.0]\n4      (0.0, 20.0]\n5     (30.0, 50.0]\n6      (0.0, 20.0]\n7      (0.0, 20.0]\n8      (0.0, 20.0]\n9     (30.0, 50.0]\n10     (0.0, 20.0]\n11     (0.0, 20.0]\n12     (0.0, 20.0]\n13             NaN\n14     (0.0, 20.0]\n15     (0.0, 20.0]\nName: Yoghurt, dtype: category\nCategories (4, interval[int64, right]): [(0, 20] < (20, 30] < (30, 50] < (50, 70]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nscaled = pd.cut(food.Yoghurt.values, scale)\nscaled.categories\n\npd.value_counts(scaled)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n(0, 20]     10\n(30, 50]     2\n(50, 70]     2\n(20, 30]     1\ndtype: int64\n```\n:::\n:::\n\n\nApply the labels to the bins to have it make more sense:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nscale_names = ['reasonable', 'ok', 'interesting', 'why']\npd.value_counts(pd.cut(food.Yoghurt.values, scale, labels = scale_names))\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nreasonable     10\ninteresting     2\nwhy             2\nok              1\ndtype: int64\n```\n:::\n:::\n\n\nFinally, let `pandas` do the work for you by supplying a number of bins and a precision point. It will bin your data equally while limiting the decimal point based on the value of `precision`\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npd.qcut(food.Yoghurt.values, 4, precision = 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[(13.0, 30.5], (1.99, 5.5], (30.5, 57.0], (30.5, 57.0], (13.0, 30.5], ..., (5.5, 13.0], (1.99, 5.5], NaN, (13.0, 30.5], (1.99, 5.5]]\nLength: 16\nCategories (4, interval[float64, right]): [(1.99, 5.5] < (5.5, 13.0] < (13.0, 30.5] < (30.5, 57.0]]\n```\n:::\n:::\n\n\n### Detecting and Filtering Outliers\n\nWe often have to face the decision of how to handle outliers. We can choose to exclude them or to transform them.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# let's say any country who's percentage of yogurt consumption is over 50% is an outlier\n\nyog = food.Yoghurt\nyog[yog.abs() > 50]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n2    57.0\n3    53.0\nName: Yoghurt, dtype: float64\n```\n:::\n:::\n\n\nMore interestingly, what if we wanted to know if the consumption of ANY food was over 50% ?\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfood2 = food.drop('Country', axis = 'columns')\nfood2[(food2.abs() > 95).any(axis = 'columns')]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Real coffee</th>\n      <th>Instant coffee</th>\n      <th>Tea</th>\n      <th>Sweetener</th>\n      <th>Biscuits</th>\n      <th>Powder soup</th>\n      <th>Tin soup</th>\n      <th>Potatoes</th>\n      <th>Frozen fish</th>\n      <th>Frozen veggies</th>\n      <th>Apples</th>\n      <th>Oranges</th>\n      <th>Tinned fruit</th>\n      <th>Jam</th>\n      <th>Garlic</th>\n      <th>Butter</th>\n      <th>Margarine</th>\n      <th>Olive oil</th>\n      <th>Yoghurt</th>\n      <th>Crisp bread</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>96</td>\n      <td>62</td>\n      <td>98</td>\n      <td>32.0</td>\n      <td>62.0</td>\n      <td>67</td>\n      <td>43</td>\n      <td>7</td>\n      <td>14</td>\n      <td>14</td>\n      <td>83</td>\n      <td>89</td>\n      <td>61</td>\n      <td>81</td>\n      <td>15</td>\n      <td>31</td>\n      <td>97</td>\n      <td>13</td>\n      <td>53.0</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>97</td>\n      <td>61</td>\n      <td>86</td>\n      <td>28.0</td>\n      <td>79.0</td>\n      <td>73</td>\n      <td>12</td>\n      <td>7</td>\n      <td>26</td>\n      <td>23</td>\n      <td>85</td>\n      <td>94</td>\n      <td>83</td>\n      <td>20</td>\n      <td>91</td>\n      <td>94</td>\n      <td>94</td>\n      <td>84</td>\n      <td>31.0</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>27</td>\n      <td>86</td>\n      <td>99</td>\n      <td>22.0</td>\n      <td>91.0</td>\n      <td>55</td>\n      <td>76</td>\n      <td>17</td>\n      <td>20</td>\n      <td>24</td>\n      <td>76</td>\n      <td>68</td>\n      <td>89</td>\n      <td>91</td>\n      <td>11</td>\n      <td>95</td>\n      <td>94</td>\n      <td>57</td>\n      <td>11.0</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>97</td>\n      <td>13</td>\n      <td>93</td>\n      <td>31.0</td>\n      <td>NaN</td>\n      <td>43</td>\n      <td>43</td>\n      <td>39</td>\n      <td>54</td>\n      <td>45</td>\n      <td>56</td>\n      <td>78</td>\n      <td>53</td>\n      <td>75</td>\n      <td>9</td>\n      <td>68</td>\n      <td>32</td>\n      <td>48</td>\n      <td>2.0</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>96</td>\n      <td>17</td>\n      <td>92</td>\n      <td>35.0</td>\n      <td>66.0</td>\n      <td>32</td>\n      <td>17</td>\n      <td>11</td>\n      <td>51</td>\n      <td>42</td>\n      <td>81</td>\n      <td>72</td>\n      <td>50</td>\n      <td>64</td>\n      <td>11</td>\n      <td>92</td>\n      <td>91</td>\n      <td>30</td>\n      <td>11.0</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>98</td>\n      <td>12</td>\n      <td>84</td>\n      <td>20.0</td>\n      <td>64.0</td>\n      <td>27</td>\n      <td>10</td>\n      <td>8</td>\n      <td>18</td>\n      <td>12</td>\n      <td>50</td>\n      <td>57</td>\n      <td>22</td>\n      <td>37</td>\n      <td>15</td>\n      <td>96</td>\n      <td>94</td>\n      <td>17</td>\n      <td>NaN</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>30</td>\n      <td>52</td>\n      <td>99</td>\n      <td>11.0</td>\n      <td>80.0</td>\n      <td>75</td>\n      <td>18</td>\n      <td>2</td>\n      <td>5</td>\n      <td>3</td>\n      <td>57</td>\n      <td>52</td>\n      <td>46</td>\n      <td>89</td>\n      <td>5</td>\n      <td>97</td>\n      <td>25</td>\n      <td>31</td>\n      <td>3.0</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Permutation and Random Sampling\n\n-   Permuting = random reordering\n\n    -   `np.random.permutation` = takes the length of the axis you want to permute\n\n-   Random sampling = each sample has an equal probability of being chosen\n\nLet's randomly reorder yogurt affinity:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nprint(np.random.permutation(5))\n\nfood.take(np.random.permutation(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 3 0 1 4]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Real coffee</th>\n      <th>Instant coffee</th>\n      <th>Tea</th>\n      <th>Sweetener</th>\n      <th>Biscuits</th>\n      <th>Powder soup</th>\n      <th>Tin soup</th>\n      <th>Potatoes</th>\n      <th>Frozen fish</th>\n      <th>...</th>\n      <th>Apples</th>\n      <th>Oranges</th>\n      <th>Tinned fruit</th>\n      <th>Jam</th>\n      <th>Garlic</th>\n      <th>Butter</th>\n      <th>Margarine</th>\n      <th>Olive oil</th>\n      <th>Yoghurt</th>\n      <th>Crisp bread</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>France</td>\n      <td>88</td>\n      <td>42</td>\n      <td>63</td>\n      <td>4.0</td>\n      <td>76.0</td>\n      <td>53</td>\n      <td>11</td>\n      <td>23</td>\n      <td>11</td>\n      <td>...</td>\n      <td>87</td>\n      <td>84</td>\n      <td>40</td>\n      <td>45</td>\n      <td>88</td>\n      <td>94</td>\n      <td>47</td>\n      <td>36</td>\n      <td>57.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Italy</td>\n      <td>82</td>\n      <td>10</td>\n      <td>60</td>\n      <td>2.0</td>\n      <td>55.0</td>\n      <td>41</td>\n      <td>3</td>\n      <td>2</td>\n      <td>4</td>\n      <td>...</td>\n      <td>67</td>\n      <td>71</td>\n      <td>9</td>\n      <td>46</td>\n      <td>80</td>\n      <td>66</td>\n      <td>24</td>\n      <td>94</td>\n      <td>5.0</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Holland</td>\n      <td>96</td>\n      <td>62</td>\n      <td>98</td>\n      <td>32.0</td>\n      <td>62.0</td>\n      <td>67</td>\n      <td>43</td>\n      <td>7</td>\n      <td>14</td>\n      <td>...</td>\n      <td>83</td>\n      <td>89</td>\n      <td>61</td>\n      <td>81</td>\n      <td>15</td>\n      <td>31</td>\n      <td>97</td>\n      <td>13</td>\n      <td>53.0</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Germany</td>\n      <td>90</td>\n      <td>49</td>\n      <td>88</td>\n      <td>19.0</td>\n      <td>57.0</td>\n      <td>51</td>\n      <td>19</td>\n      <td>21</td>\n      <td>27</td>\n      <td>...</td>\n      <td>81</td>\n      <td>75</td>\n      <td>44</td>\n      <td>71</td>\n      <td>22</td>\n      <td>91</td>\n      <td>85</td>\n      <td>74</td>\n      <td>30.0</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Belgium</td>\n      <td>94</td>\n      <td>38</td>\n      <td>48</td>\n      <td>11.0</td>\n      <td>74.0</td>\n      <td>37</td>\n      <td>23</td>\n      <td>9</td>\n      <td>13</td>\n      <td>...</td>\n      <td>76</td>\n      <td>76</td>\n      <td>42</td>\n      <td>57</td>\n      <td>29</td>\n      <td>84</td>\n      <td>80</td>\n      <td>83</td>\n      <td>20.0</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 21 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis method can be helpful when using `iloc` indexing!\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nfood.take(np.random.permutation(5), axis = 'columns')\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Sweetener</th>\n      <th>Instant coffee</th>\n      <th>Real coffee</th>\n      <th>Tea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Germany</td>\n      <td>19.0</td>\n      <td>49</td>\n      <td>90</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Italy</td>\n      <td>2.0</td>\n      <td>10</td>\n      <td>82</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>France</td>\n      <td>4.0</td>\n      <td>42</td>\n      <td>88</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Holland</td>\n      <td>32.0</td>\n      <td>62</td>\n      <td>96</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Belgium</td>\n      <td>11.0</td>\n      <td>38</td>\n      <td>94</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Luxembourg</td>\n      <td>28.0</td>\n      <td>61</td>\n      <td>97</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>England</td>\n      <td>22.0</td>\n      <td>86</td>\n      <td>27</td>\n      <td>99</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Portugal</td>\n      <td>2.0</td>\n      <td>26</td>\n      <td>72</td>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Austria</td>\n      <td>15.0</td>\n      <td>31</td>\n      <td>55</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Switzerland</td>\n      <td>25.0</td>\n      <td>72</td>\n      <td>73</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Sweden</td>\n      <td>31.0</td>\n      <td>13</td>\n      <td>97</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Denmark</td>\n      <td>35.0</td>\n      <td>17</td>\n      <td>96</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Norway</td>\n      <td>13.0</td>\n      <td>17</td>\n      <td>92</td>\n      <td>83</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Finland</td>\n      <td>20.0</td>\n      <td>12</td>\n      <td>98</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Spain</td>\n      <td>NaN</td>\n      <td>40</td>\n      <td>70</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Ireland</td>\n      <td>11.0</td>\n      <td>52</td>\n      <td>30</td>\n      <td>99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's try taking a random subset without replacement:\\\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfood.sample(n =5)\n# you can always add `replace=True` if you want replacement\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Real coffee</th>\n      <th>Instant coffee</th>\n      <th>Tea</th>\n      <th>Sweetener</th>\n      <th>Biscuits</th>\n      <th>Powder soup</th>\n      <th>Tin soup</th>\n      <th>Potatoes</th>\n      <th>Frozen fish</th>\n      <th>...</th>\n      <th>Apples</th>\n      <th>Oranges</th>\n      <th>Tinned fruit</th>\n      <th>Jam</th>\n      <th>Garlic</th>\n      <th>Butter</th>\n      <th>Margarine</th>\n      <th>Olive oil</th>\n      <th>Yoghurt</th>\n      <th>Crisp bread</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>14</th>\n      <td>Spain</td>\n      <td>70</td>\n      <td>40</td>\n      <td>40</td>\n      <td>NaN</td>\n      <td>62.0</td>\n      <td>43</td>\n      <td>2</td>\n      <td>14</td>\n      <td>23</td>\n      <td>...</td>\n      <td>59</td>\n      <td>77</td>\n      <td>30</td>\n      <td>38</td>\n      <td>86</td>\n      <td>44</td>\n      <td>51</td>\n      <td>91</td>\n      <td>16.0</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Italy</td>\n      <td>82</td>\n      <td>10</td>\n      <td>60</td>\n      <td>2.0</td>\n      <td>55.0</td>\n      <td>41</td>\n      <td>3</td>\n      <td>2</td>\n      <td>4</td>\n      <td>...</td>\n      <td>67</td>\n      <td>71</td>\n      <td>9</td>\n      <td>46</td>\n      <td>80</td>\n      <td>66</td>\n      <td>24</td>\n      <td>94</td>\n      <td>5.0</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Switzerland</td>\n      <td>73</td>\n      <td>72</td>\n      <td>85</td>\n      <td>25.0</td>\n      <td>31.0</td>\n      <td>69</td>\n      <td>10</td>\n      <td>17</td>\n      <td>19</td>\n      <td>...</td>\n      <td>79</td>\n      <td>70</td>\n      <td>46</td>\n      <td>61</td>\n      <td>64</td>\n      <td>82</td>\n      <td>48</td>\n      <td>61</td>\n      <td>48.0</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Belgium</td>\n      <td>94</td>\n      <td>38</td>\n      <td>48</td>\n      <td>11.0</td>\n      <td>74.0</td>\n      <td>37</td>\n      <td>23</td>\n      <td>9</td>\n      <td>13</td>\n      <td>...</td>\n      <td>76</td>\n      <td>76</td>\n      <td>42</td>\n      <td>57</td>\n      <td>29</td>\n      <td>84</td>\n      <td>80</td>\n      <td>83</td>\n      <td>20.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Finland</td>\n      <td>98</td>\n      <td>12</td>\n      <td>84</td>\n      <td>20.0</td>\n      <td>64.0</td>\n      <td>27</td>\n      <td>10</td>\n      <td>8</td>\n      <td>18</td>\n      <td>...</td>\n      <td>50</td>\n      <td>57</td>\n      <td>22</td>\n      <td>37</td>\n      <td>15</td>\n      <td>96</td>\n      <td>94</td>\n      <td>17</td>\n      <td>NaN</td>\n      <td>64</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 21 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Computing Indicator/Dummy Vars\n\nThis kind of transformation is really helpful for machine learning. It converts categorical variables into indicator or *dummy* variable through a transformation that results in 0's and 1's.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\npd.get_dummies(food['Country'])\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Austria</th>\n      <th>Belgium</th>\n      <th>Denmark</th>\n      <th>England</th>\n      <th>Finland</th>\n      <th>France</th>\n      <th>Germany</th>\n      <th>Holland</th>\n      <th>Ireland</th>\n      <th>Italy</th>\n      <th>Luxembourg</th>\n      <th>Norway</th>\n      <th>Portugal</th>\n      <th>Spain</th>\n      <th>Sweden</th>\n      <th>Switzerland</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis example is not the most helpful since this set of countries are *unique* but I hope you get the idea..\n\nThis is topic will make more sense in Ch.13 when data analysis examples are worked out.\n\n## 7.3 Extension Data Types\n\nExtension types addresses some of the shortcomings brought on by `numpy` such as:\n\n-   expensive string computations\n\n-   missing data conversions\n\n-   lack of support for time related objects\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ns = pd.Series([1, 2, 3, None])\ns.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ndtype('float64')\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ns = pd.Series([1, 2, 3, None], dtype=pd.Int64Dtype())\ns\nprint(s.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInt64\n```\n:::\n:::\n\n\nNote that this extension type indicates missing with `<NA>`\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nprint(s.isna())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    False\n1    False\n2    False\n3     True\ndtype: bool\n```\n:::\n:::\n\n\n`<NA>` uses the `pandas.NA` sentinal value\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ns[3] is pd.NA\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nTrue\n```\n:::\n:::\n\n\nTypes can be set with `astype()`\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndf = pd.DataFrame({\"A\": [1, 2, None, 4],\n\"B\": [\"one\", \"two\", \"three\", None],\n\"C\": [False, None, False, True]})\n\ndf[\"A\"] = df[\"A\"].astype(\"Int64\")\ndf[\"B\"] = df[\"B\"].astype(\"string\")\ndf[\"C\"] = df[\"C\"].astype(\"boolean\")\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>one</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>two</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>&lt;NA&gt;</td>\n      <td>three</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>&lt;NA&gt;</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFind a table of extension types [here](https://wesmckinney.com/book/data-cleaning.html#pandas-ext-types)\n\n## 7.4 String Manipulation\n\nFunctions that are built in:\n\n-   `split()` : break a string into pieces\n\n-   `join()`\n\n-   `strip()` : trim whitespace\n\n-   `in()`: good for locating a substring\n\n-   `count()` : returns the number of occurrences of a substring\n\n-   `replace()` : substitute occurrences of one pattern for another\n\nSee more function [here](https://wesmckinney.com/book/data-cleaning.html#text_string_methods)\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nlb = \" layla is smart, witty, charming, and... \"\nlb.split(\" \")\nlb.strip()\n'-'.join(lb)\n'smart' in lb\nlb.count(',')\nlb.replace('...', ' bad at python.')\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n' layla is smart, witty, charming, and bad at python. '\n```\n:::\n:::\n\n\n### Regular Expressions\n\nRegEx is not easy. It takes some getting used to. It is really useful for programatically applying any of the string functions to particular pattern.\n\nI often refer to this handy \\[cheat sheet\\](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)\n\nTo use regular expression in python, you must import the module `re`:\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nimport re\n\ntext = \"layla has lived in philadelphia county, miami-dade county, and rockdale county\"\n\n# split on whitespace\nre.split(r\"\\s+\", text)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n['layla',\n 'has',\n 'lived',\n 'in',\n 'philadelphia',\n 'county,',\n 'miami-dade',\n 'county,',\n 'and',\n 'rockdale',\n 'county']\n```\n:::\n:::\n\n\nTo avoid repeating a common expression, you can *compile it* and store it as it's own object.\n\n    regex = re.compile(r\"\\s+\")\n\n**Don't forget**: there are certain characters you must escape before using like: '\\\\,., +, :' and more\n\nWhat if I wanted to get the counties?\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nregex = re.compile(r\"\\w+(?=\\s+county)\")\n\nregex.findall(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n['philadelphia', 'dade', 'rockdale']\n```\n:::\n:::\n\n\n### String Functions\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndata = {\"Dave\": \"dave@google.com\", \"Steve\": \"steve@gmail.com\",\n\"Rob\": \"rob@gmail.com\", \"Wes\": np.nan}\n# convert to series\ndata = pd.Series(data)\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                  NaN\ndtype: object\n```\n:::\n:::\n\n\nTo get certain information, we can apply string functions from `Series` array-oriented methods:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# does the string contain something\ndata.str.contains(\"gmail\")\n# change the extension tryp\ndata_as_string_ext = data.astype('string')\ndata_as_string_ext\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                 <NA>\ndtype: string\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# vectorized element retrieval\npattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\"\ndata.str.findall(pattern, flags=re.IGNORECASE).str[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nDave     (dave, google, com)\nSteve    (steve, gmail, com)\nRob        (rob, gmail, com)\nWes                      NaN\ndtype: object\n```\n:::\n:::\n\n\n## 7.5 Categorical Data\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nvalues = pd.Series(['apple', 'orange', 'apple',\n                   'apple'] * 2)\n                   \npd.unique(values)\npd.value_counts(values)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\napple     6\norange    2\ndtype: int64\n```\n:::\n:::\n\n\nYou can improve performance by creating categorical representations that are numerical:\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nvalues = pd.Series([0, 1, 0, 0] * 2)\ndim = pd.Series(['apple', 'orange'])\n\ndim\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n0     apple\n1    orange\ndtype: object\n```\n:::\n:::\n\n\nRetrieve the original set of strings with `take`\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndim.take(values)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n0     apple\n1    orange\n0     apple\n0     apple\n0     apple\n1    orange\n0     apple\n0     apple\ndtype: object\n```\n:::\n:::\n\n\n### Computations with Categoricals\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nrng = np.random.default_rng(seed=12345)\ndraws = rng.standard_normal(1000)\nbins = pd.qcut(draws, 4)\nbins\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n[(-3.121, -0.675], (0.687, 3.211], (-3.121, -0.675], (-0.675, 0.0134], (-0.675, 0.0134], ..., (0.0134, 0.687], (0.0134, 0.687], (-0.675, 0.0134], (0.0134, 0.687], (-0.675, 0.0134]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.121, -0.675] < (-0.675, 0.0134] < (0.0134, 0.687] < (0.687, 3.211]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nbins = pd.qcut(draws, 4, labels=['Q1', 'Q2', 'Q3', 'Q4'])\nbins\n# then use groupby\nbins = pd.Series(bins, name='quartile')\nresults = (pd.Series(draws)\n               .groupby(bins)\n               .agg(['count', 'min', 'max'])\n               .reset_index())\n```\n:::\n\n\nLeads to better performance\n\n",
    "supporting": [
      "07_main_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}