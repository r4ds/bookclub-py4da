{
  "hash": "75619e7d297c31197935dbea155eff90",
  "result": {
    "markdown": "## Notes {.unnumbered}\n\nBefore we can even get to the fun of data analysis, we first need to learn how to load in our data!\n\n![](images/DAmeme.png){dpi=\"300\" width=\"425\"}\n\nToday, we'll learn to work with the following categories of data inputs and outputs:\n\n-   Text\n-   Binary\n-   Web APIs\n-   Databases\n\n## Reading and Writing Data in Text Format\n\n### `read_csv` Arguments\n\n[Table 6.1](https://wesmckinney.com/book/accessing-data.html#tbl-table_parsing_functions) lists the various data types pandas can read.\n\nEach function can be called with `pd.read_*` (for example, `pd.read_csv`).\n\n::: callout-note\nWes points out that the number of arguments can be overwhelming. `pd.read_csv` has about 50. The [pandas documentation](https://pandas.pydata.org/docs/reference/io.html) is a good resource for finding the right arguments.\n:::\n\n[Table 6.2](https://wesmckinney.com/book/accessing-data.html#tbl-table_read_csv_function) lists frequently used options in `pd.read_csv`.\n\nLet's import the [Palmer Penguins dataset](https://github.com/allisonhorst/palmerpenguins/blob/main/inst/extdata/penguins.csv) to explore this function and some of the csv arguments. *Note*: I added random numbers for month and day to demonstrate date parsing.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\npenguins = pd.read_csv(\"data/penguins.csv\")\n\npenguins.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>4</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>3</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>7</td>\n      <td>22</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>13</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>8</td>\n      <td>21</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Index Columns\n\n**Indexing** gets column names from the file or from this argument\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins_indexed = pd.read_csv(\"data/penguins.csv\", index_col = \"species\")\npenguins_indexed.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelie</th>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>4</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>3</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>7</td>\n      <td>22</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>13</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>8</td>\n      <td>21</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Infer or Convert Data Type\n\n**Type inference and data conversion** converts values (including missing) to a user-defined value.\n\nIf you data uses another string value as the missing placeholder, you can add it to `na_values`.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npenguins_NA = pd.read_csv(\n  \"data/penguins.csv\", \n  na_values = [\"male\"]\n  )\n  \npenguins_NA.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>NaN</td>\n      <td>4</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>3</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>7</td>\n      <td>22</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>13</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>8</td>\n      <td>21</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Parse Date and Time\n\n**Date and time parsing** combines date and time from multiple columns into a single column\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npenguins_dates = pd.read_csv(\n  \"data/penguins.csv\", \n  parse_dates = {\"date\": [\"month\", \"day\", \"year\"]}\n  )\n  \npenguins_dates[\"date\"] = pd.to_datetime(\n  penguins_dates.date, \n  format = \"%m%d%Y\"\n  )\n  \nprint(penguins_dates.date.head(5))\n\nprint(penguins_dates.date.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0   2007-04-10\n1   2007-03-06\n2   2007-07-22\n3   2007-02-13\n4   2007-08-21\nName: date, dtype: datetime64[ns]\ndatetime64[ns]\n```\n:::\n:::\n\n\n#### Iterate Through Large Files\n\n**Iterating** allows iteration over chunks of very large files\n\nUsing `nrows` to read in only 5 rows:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npd.read_csv(\"data/penguins.csv\", nrows = 5\n  )\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>4</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>3</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>7</td>\n      <td>22</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>13</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>8</td>\n      <td>21</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nUsing `chunksize` and the `TextFileReader` to aggregate and summarize the data by species:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nchunker = pd.read_csv(\"data/penguins.csv\", chunksize = 10)\n\nprint(type(chunker))\n\ntot = pd.Series([], dtype = 'int64')\nfor piece in chunker:\n    tot = tot.add(piece[\"species\"].value_counts(), fill_value = 0)\n\ntot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.io.parsers.readers.TextFileReader'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\nAdelie       152.0\nChinstrap     68.0\nGentoo       124.0\ndtype: float64\n```\n:::\n:::\n\n\n#### Import Semi-Clean Data\n\n**Unclean data issues** skips rows, comments, punctuation, etc.\n\nWe can import a subset of the columns using `usecols` and change their names (`header = 0`; `names = [list]`).\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npenguins_custom = pd.read_csv(\n  \"data/penguins.csv\", \n  usecols = [0,1,6],\n  header = 0, \n  names = [\"Species\", \"Island\", \"Sex\"]\n  )\n\npenguins_custom.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Species</th>\n      <th>Island</th>\n      <th>Sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>female</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>female</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Writing Data to Text Format\n\nTo write to a csv file, we can use pandas DataFrame's `to_csv` method with `index = False` so the row numbers are not stored in the first column. Missing values are written as empty strings, we can specify a placeholder with `na_rep = \"NA\"`:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\npenguins_custom.to_csv(\n  \"data/penguins_custom.csv\", \n  index = False,\n  na_rep = \"NA\"\n  )\n```\n:::\n\n\n::: {layout-ncol=\"2\"}\n![](images/penguins_custom_noArgs.png){width=\"317\"}\n\n![](images/penguins_custom.png){width=\"247\"}\n:::\n\n### Working with Other Delimited Formats\n\n#### Reading\n\nIn case your tabular data makes pandas trip up and you need a little extra manual processing, you can use Python's built in `csv` module.\n\nLet's read in the penguins dataset the hard, manual way.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport csv\n\npenguin_reader = csv.reader(penguins)\n\nprint(penguin_reader)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<_csv.reader object at 0x0000026704996340>\n```\n:::\n:::\n\n\nNow we have the `_csv_reader` object.\n\nNext, Wes iterated through the reader to print the lines, which seems to only give me the row with my headings.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfor line in penguin_reader:\n  print(line)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['species']\n['island']\n['bill_length_mm']\n['bill_depth_mm']\n['flipper_length_mm']\n['body_mass_g']\n['sex']\n['month']\n['day']\n['year']\n```\n:::\n:::\n\n\nWe'll keep following along to wrangle it into a form we can use:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nwith open(\"data/penguins.csv\") as penguin_reader:\n  lines = list(csv.reader(penguin_reader))\n  \nheader, values = lines[0], lines[1:]\n\nprint(header)\nprint(values[5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['species', 'island', 'bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'sex', 'month', 'day', 'year']\n['Adelie', 'Torgersen', '39.3', '20.6', '190', '3650', 'male', '3', '3', '2007']\n```\n:::\n:::\n\n\nNow we have two lists: header and values. We use a dictionary of data columns and the expression `zip(*values)`. This combination of dictionary comprehension and expression is generally faster than iterating through a loop. However, Wes warns that this can use a lot of memory on large files.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\npenguin_dict = {h: v for h, v in zip(header, zip(*values))}\n\n# too big to print and I'm not sure how to print a select few key-value pairs\n```\n:::\n\n\n::: callout-note\n## Recall\n\nFor a reminder on dictionary comprehensions, see [Chapter 3](https://wesmckinney.com/book/python-builtin.html#comprehensions).\n:::\n\nNow to finally get this into a usable dataframe we'll use pandas DataFrame `from_dict` method!\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\npenguin_df = pd.DataFrame.from_dict(penguin_dict)\npenguin_df.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181</td>\n      <td>3750</td>\n      <td>male</td>\n      <td>4</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186</td>\n      <td>3800</td>\n      <td>female</td>\n      <td>3</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18</td>\n      <td>195</td>\n      <td>3250</td>\n      <td>female</td>\n      <td>7</td>\n      <td>22</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NA</td>\n      <td>NA</td>\n      <td>NA</td>\n      <td>NA</td>\n      <td>NA</td>\n      <td>2</td>\n      <td>13</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193</td>\n      <td>3450</td>\n      <td>female</td>\n      <td>8</td>\n      <td>21</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### `csv.Dialect`\n\nSince there are many kinds of delimited files, string quoting conventions, and line terminators, you may find yourself wanting to define a \"Dialect\" to read in your delimited file. The options available are found in [Table 6.3](https://wesmckinney.com/book/accessing-data.html#tbl-table_csv_dialect).\n\nYou can either define a `csv.Dialect` subclass or pass dialect parameters to `csv.reader`.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# option 1\n\n## define a dialect subclass\n\nclass my_dialect(csv.Dialect):\n    lineterminator = \"\\n\"\n    delimiter = \";\"\n    quotechar = '\"'\n    quoting = csv.QUOTE_MINIMAL\n    \n## use the subclass\n\nreader = csv.reader(penguins, dialect = my_dialect)\n\n# option 2\n\n## pass just dialect parameters\n\nreader = csv.reader(penguins, delimiter = \",\")\n```\n:::\n\n\n::: callout-tip\n## Recap for when to use what?\n\nFor most data, pandas `read_*` functions, plus the overwhelming number of options, will likely get you close to what you need.\n\nIf there are additional, minor wrangling needs, you can try using Python's `csv.reader` with either a `csv.Dialect` subclass or just by passing in dialect parameters.\n\nIf you have complicated or multicharacter delimiters, you'll likely need to import the string module and use the `split` method or regular expression method `re.split`.\n:::\n\n#### Writing\n\n`csv.writer` is the companion to `csv.reader` with the same dialect and format options. The first argument in `open` is the path and filename you want to write to and the second argument `\"w\"` makes the file writeable.\n\n::: callout-note\n[Python documentation](https://docs.python.org/3/library/csv.html#id3) notes that `newline=\"\"` should be specified in case there are newlines embedded inside quoted fields to ensure they are interpreted correctly.\n:::\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nwith open(\"data/write_data.csv\", \"w\", newline = \"\") as f:\n    writer = csv.writer(f, dialect = my_dialect)\n    writer.writerow((\"one\", \"two\", \"three\"))\n    writer.writerow((\"1\", \"2\", \"3\"))\n    writer.writerow((\"4\", \"5\", \"6\"))\n    writer.writerow((\"7\", \"8\", \"9\"))\n```\n:::\n\n\n#### JavaScript Object Notation (JSON) Data\n\nStandard format for HTTP requests between web browsers, applications, and APIs. Its almost valid Python code:\n\n-   Instead of `NaN`, it uses `null`\n\n-   Doesn't allow trailing commas at end of lists\n\n-   Data types: objects (dictionaries), arrays (lists), strings, numbers, booleans, and nulls.\n\nWe'll make up a simple file of my pets' names, types, and sex to demonstrate JSON data loading and writing.\n\n![](images/mts.jpg){width=\"319\"}\n\nImport the json module and use `json.loads` to convert a JSON string to Python. There are multiple ways to convert JSON objects to a DataFrame.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nimport json\n\nobj = \"\"\"\n{\"name\": \"Jadey\",\n \"pets\": [{\"name\": \"Mai\", \"type\": \"cat\", \"sex\": \"Female\"},\n          {\"name\": \"Tai\", \"type\": \"cat\", \"sex\": \"Male\"},\n          {\"name\": \"Skye\", \"type\": \"cat\", \"sex\": \"Female\"}]\n}\n\"\"\"\n\njson_to_py = json.loads(obj)\n\nprint(json_to_py)\ntype(json_to_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Jadey', 'pets': [{'name': 'Mai', 'type': 'cat', 'sex': 'Female'}, {'name': 'Tai', 'type': 'cat', 'sex': 'Male'}, {'name': 'Skye', 'type': 'cat', 'sex': 'Female'}]}\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\ndict\n```\n:::\n:::\n\n\nSince this imported the object as a dictionary, we can use `pd.DataFrame` to create a DataFrame of the pets' names, type, and sex.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\npets_df = pd.DataFrame(json_to_py[\"pets\"], columns = [\"name\", \"type\", \"sex\"])\n\nprint(type(pets_df))\npets_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>type</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mai</td>\n      <td>cat</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tai</td>\n      <td>cat</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Skye</td>\n      <td>cat</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nUse `json.dumps` to convert from Python (class: dictionary) back to JSON (class: string).\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npy_to_json = json.dumps(json_to_py)\n\nprint(\"json_to_py type:\", type(json_to_py))\nprint(\"py_to_json type:\", type(py_to_json))\npy_to_json\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njson_to_py type: <class 'dict'>\npy_to_json type: <class 'str'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n'{\"name\": \"Jadey\", \"pets\": [{\"name\": \"Mai\", \"type\": \"cat\", \"sex\": \"Female\"}, {\"name\": \"Tai\", \"type\": \"cat\", \"sex\": \"Male\"}, {\"name\": \"Skye\", \"type\": \"cat\", \"sex\": \"Female\"}]}'\n```\n:::\n:::\n\n\nWe can use pandas `pd.read_json` function and `to_json` DataFrame method to read and write JSON files.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\npets_df.to_json(\"data/pets.json\")\n```\n:::\n\n\nWe can easily import a JSON file using `pandas.read_json`.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\npet_data = pd.read_json(\"data/pets.json\")\npet_data\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>type</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mai</td>\n      <td>cat</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tai</td>\n      <td>cat</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Skye</td>\n      <td>cat</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Web Scraping\n\n#### HTML\n\n`pd.read_html` uses libraries to read and write HTML and XML:\n\n-   Try: xlml \\[faster\\]\n\n-   Catch: beautifulsoup4 and html5lib \\[better equipped for malformed files\\]\n\nIf you want to specify which parsing engine is used, you can use the `flavor` argument.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntables = pd.read_html(\n  \"https://www.fdic.gov/resources/resolutions/bank-failures/failed-bank-list/\", \n  flavor = \"html5lib\"\n  )\n\nprint(\"Table Length:\", len(tables))\n\n# since this outputs a list of tables, we can grab just the first table\n\ntables[0].head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTable Length: 1\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Bank NameBank</th>\n      <th>CityCity</th>\n      <th>StateSt</th>\n      <th>CertCert</th>\n      <th>Acquiring InstitutionAI</th>\n      <th>Closing DateClosing</th>\n      <th>FundFund</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Almena State Bank</td>\n      <td>Almena</td>\n      <td>KS</td>\n      <td>15426</td>\n      <td>Equity Bank</td>\n      <td>October 23, 2020</td>\n      <td>10538</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>First City Bank of Florida</td>\n      <td>Fort Walton Beach</td>\n      <td>FL</td>\n      <td>16748</td>\n      <td>United Fidelity Bank, fsb</td>\n      <td>October 16, 2020</td>\n      <td>10537</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The First State Bank</td>\n      <td>Barboursville</td>\n      <td>WV</td>\n      <td>14361</td>\n      <td>MVB Bank, Inc.</td>\n      <td>April 3, 2020</td>\n      <td>10536</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Ericson State Bank</td>\n      <td>Ericson</td>\n      <td>NE</td>\n      <td>18265</td>\n      <td>Farmers and Merchants Bank</td>\n      <td>February 14, 2020</td>\n      <td>10535</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>City National Bank of New Jersey</td>\n      <td>Newark</td>\n      <td>NJ</td>\n      <td>21111</td>\n      <td>Industrial Bank</td>\n      <td>November 1, 2019</td>\n      <td>10534</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### XML\n\nXML format is more general than HTML, but they are structurally similar. See [pandas documentation](https://pandas.pydata.org/docs/reference/api/pandas.read_xml.html) for `pd.read_xml`.\n\nThis snippet of an xml file is from [Microsoft](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms762271(v=vs.85)).\n\n``` xml\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications \n      with XML.</description>\n   </book>\n```\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nbooks = pd.read_xml(\"data/books.xml\")\n\nbooks.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>author</th>\n      <th>title</th>\n      <th>genre</th>\n      <th>price</th>\n      <th>publish_date</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>bk101</td>\n      <td>Gambardella, Matthew</td>\n      <td>XML Developer's Guide</td>\n      <td>Computer</td>\n      <td>44.95</td>\n      <td>2000-10-01</td>\n      <td>An in-depth look at creating applications \\n  ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bk102</td>\n      <td>Ralls, Kim</td>\n      <td>Midnight Rain</td>\n      <td>Fantasy</td>\n      <td>5.95</td>\n      <td>2000-12-16</td>\n      <td>A former architect battles corporate zombies, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bk103</td>\n      <td>Corets, Eva</td>\n      <td>Maeve Ascendant</td>\n      <td>Fantasy</td>\n      <td>5.95</td>\n      <td>2000-11-17</td>\n      <td>After the collapse of a nanotechnology \\n     ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bk104</td>\n      <td>Corets, Eva</td>\n      <td>Oberon's Legacy</td>\n      <td>Fantasy</td>\n      <td>5.95</td>\n      <td>2001-03-10</td>\n      <td>In post-apocalypse England, the mysterious \\n ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bk105</td>\n      <td>Corets, Eva</td>\n      <td>The Sundered Grail</td>\n      <td>Fantasy</td>\n      <td>5.95</td>\n      <td>2001-09-10</td>\n      <td>The two daughters of Maeve, half-sisters, \\n  ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf you'd like to manually parse a file, Wes demonstrates this process in the [textbook](https://wesmckinney.com/book/accessing-data.html#io_file_formats_xml), before demonstrating how the following steps are turned into one line of code using `pd.read_xml`.\n\n1.  `from lxml import objectify`\n2.  Use `lxml.objectify`,\n3.  Create a dictionary of tag names to data values\n4.  Cnvert that list of dictionaries into a DataFrame.\n\n### Binary Data Formats\n\n#### Pickle\n\nPython has a built-in `pickle` module that converts pandas objects into the pickle format (serializes the data into a byte stream), which is generally readable only in Python.\n\nMore information can be found in Python [documentation](https://docs.python.org/3/library/pickle.html).\n\nHere's a demo to show pickling and unpickling the penguins dataset.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nprint(\"Unpickled penguins type:\", type(penguins))\n\npenguins.to_pickle(\"data/penguins_pickle\")\n\n# do some machine learning\n\npickled_penguins = pd.read_pickle(\"data/penguins_pickle\")\npickled_penguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnpickled penguins type: <class 'pandas.core.frame.DataFrame'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>4</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>3</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>7</td>\n      <td>22</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>13</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>8</td>\n      <td>21</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>339</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>55.8</td>\n      <td>19.8</td>\n      <td>207.0</td>\n      <td>4000.0</td>\n      <td>male</td>\n      <td>6</td>\n      <td>4</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>340</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>43.5</td>\n      <td>18.1</td>\n      <td>202.0</td>\n      <td>3400.0</td>\n      <td>female</td>\n      <td>6</td>\n      <td>8</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>341</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>49.6</td>\n      <td>18.2</td>\n      <td>193.0</td>\n      <td>3775.0</td>\n      <td>male</td>\n      <td>4</td>\n      <td>8</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>342</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.8</td>\n      <td>19.0</td>\n      <td>210.0</td>\n      <td>4100.0</td>\n      <td>male</td>\n      <td>8</td>\n      <td>24</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>343</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.2</td>\n      <td>18.7</td>\n      <td>198.0</td>\n      <td>3775.0</td>\n      <td>female</td>\n      <td>2</td>\n      <td>11</td>\n      <td>2009</td>\n    </tr>\n  </tbody>\n</table>\n<p>344 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: callout-warning\n`pickle` is recommended only as a short-term storage format (i.e. loading and unloading your machine learning models) because the format may not be stable over time. Also, the module is not secure -- pickle data can be maliciously tampered with. [Python docs](https://docs.python.org/3/library/pickle.html) recommend signing data with `hmac` to ensure it hasn't been tampered with.\n:::\n\n#### Microsoft Excel Files\n\n`pd.ExcelFile` class or `pd.read_excel` functions use packages `xlrd` (for older .xlx files) and `openpyxl` (for newer .xlsx files), which must be installed separately from pandas.\n\n``` bash\nconda install xlrd openpyxl\n```\n\n`pd.read_excel` takes most of the same arguments as `pd.read_csv`.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\npenguins_excel = pd.read_excel(\n  \"data/penguins.xlsx\", \n  index_col = \"species\",\n  parse_dates = {\"date\": [\"month\", \"day\", \"year\"]}\n)\n\npenguins_excel.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelie</th>\n      <td>2007-04-10</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>2007-03-06</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>2007-07-22</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>2007-02-13</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Adelie</th>\n      <td>2007-08-21</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo read multiple sheets, use `pd.ExcelFile`.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\npenguins_sheets = pd.ExcelFile(\"data/penguins_sheets.xlsx\")\n\nprint(\"Available sheet names:\", penguins_sheets.sheet_names)\n\npenguins_sheets\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAvailable sheet names: ['chinstrap', 'gentoo', 'adelie']\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n<pandas.io.excel._base.ExcelFile at 0x26705acdd90>\n```\n:::\n:::\n\n\nThen we can `parse` all sheets into a dictionary by specifying the `sheet_name` argument as `None`. Or, we can read in a subset of sheets.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nsheets = penguins_sheets.parse(sheet_name = None)\n\nsheets\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n{'chinstrap':       species island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n 0   Chinstrap  Dream            46.5           17.9                192   \n 1   Chinstrap  Dream            50.0           19.5                196   \n 2   Chinstrap  Dream            51.3           19.2                193   \n 3   Chinstrap  Dream            45.4           18.7                188   \n 4   Chinstrap  Dream            52.7           19.8                197   \n ..        ...    ...             ...            ...                ...   \n 63  Chinstrap  Dream            55.8           19.8                207   \n 64  Chinstrap  Dream            43.5           18.1                202   \n 65  Chinstrap  Dream            49.6           18.2                193   \n 66  Chinstrap  Dream            50.8           19.0                210   \n 67  Chinstrap  Dream            50.2           18.7                198   \n \n     body_mass_g     sex  month  day  year  \n 0          3500  female      7    4  2007  \n 1          3900    male      9    6  2007  \n 2          3650    male      4   15  2007  \n 3          3525  female      6   10  2007  \n 4          3725    male      8   19  2007  \n ..          ...     ...    ...  ...   ...  \n 63         4000    male      6    4  2009  \n 64         3400  female      6    8  2009  \n 65         3775    male      4    8  2009  \n 66         4100    male      8   24  2009  \n 67         3775  female      2   11  2009  \n \n [68 rows x 10 columns],\n 'gentoo':     species  island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n 0    Gentoo  Biscoe            46.1           13.2              211.0   \n 1    Gentoo  Biscoe            50.0           16.3              230.0   \n 2    Gentoo  Biscoe            48.7           14.1              210.0   \n 3    Gentoo  Biscoe            50.0           15.2              218.0   \n 4    Gentoo  Biscoe            47.6           14.5              215.0   \n ..      ...     ...             ...            ...                ...   \n 119  Gentoo  Biscoe             NaN            NaN                NaN   \n 120  Gentoo  Biscoe            46.8           14.3              215.0   \n 121  Gentoo  Biscoe            50.4           15.7              222.0   \n 122  Gentoo  Biscoe            45.2           14.8              212.0   \n 123  Gentoo  Biscoe            49.9           16.1              213.0   \n \n      body_mass_g     sex  month  day  year  \n 0         4500.0  female      3    8  2007  \n 1         5700.0    male      2    4  2007  \n 2         4450.0  female      7    1  2007  \n 3         5700.0    male      9   15  2007  \n 4         5400.0    male     11   19  2007  \n ..           ...     ...    ...  ...   ...  \n 119          NaN     NaN     12   11  2009  \n 120       4850.0  female      7   20  2009  \n 121       5750.0    male      9   18  2009  \n 122       5200.0  female     12   11  2009  \n 123       5400.0    male      6   15  2009  \n \n [124 rows x 10 columns],\n 'adelie':     species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n 0    Adelie  Torgersen            39.1           18.7              181.0   \n 1    Adelie  Torgersen            39.5           17.4              186.0   \n 2    Adelie  Torgersen            40.3           18.0              195.0   \n 3    Adelie  Torgersen             NaN            NaN                NaN   \n 4    Adelie  Torgersen            36.7           19.3              193.0   \n ..      ...        ...             ...            ...                ...   \n 147  Adelie      Dream            36.6           18.4              184.0   \n 148  Adelie      Dream            36.0           17.8              195.0   \n 149  Adelie      Dream            37.8           18.1              193.0   \n 150  Adelie      Dream            36.0           17.1              187.0   \n 151  Adelie      Dream            41.5           18.5              201.0   \n \n      body_mass_g     sex  month  day  year  \n 0         3750.0    male      4   10  2007  \n 1         3800.0  female      3    6  2007  \n 2         3250.0  female      7   22  2007  \n 3            NaN     NaN      2   13  2007  \n 4         3450.0  female      8   21  2007  \n ..           ...     ...    ...  ...   ...  \n 147       3475.0  female     11    4  2009  \n 148       3450.0  female      5   21  2009  \n 149       3750.0    male      8   15  2009  \n 150       3700.0  female      1   16  2009  \n 151       4000.0    male      5    8  2009  \n \n [152 rows x 10 columns]}\n```\n:::\n:::\n\n\nThen we can subset one of the sheets as a pandas DataFrame object.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nchinstrap = sheets[\"chinstrap\"].head(5)\nchinstrap\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>46.5</td>\n      <td>17.9</td>\n      <td>192</td>\n      <td>3500</td>\n      <td>female</td>\n      <td>7</td>\n      <td>4</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.0</td>\n      <td>19.5</td>\n      <td>196</td>\n      <td>3900</td>\n      <td>male</td>\n      <td>9</td>\n      <td>6</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>51.3</td>\n      <td>19.2</td>\n      <td>193</td>\n      <td>3650</td>\n      <td>male</td>\n      <td>4</td>\n      <td>15</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>45.4</td>\n      <td>18.7</td>\n      <td>188</td>\n      <td>3525</td>\n      <td>female</td>\n      <td>6</td>\n      <td>10</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>52.7</td>\n      <td>19.8</td>\n      <td>197</td>\n      <td>3725</td>\n      <td>male</td>\n      <td>8</td>\n      <td>19</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWrite one sheet to using `to_excel:`\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nchinstrap.to_excel(\"data/chinstrap.xlsx\")\n```\n:::\n\n\nIf you want to write to multiple sheets, create an `ExcelWriter` class and then write the data to it:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ngentoo = sheets[\"gentoo\"].head(5)\n\nwriter = pd.ExcelWriter(\"data/chinstrap_gentoo.xlsx\")\n\nchinstrap.to_excel(writer, sheet_name = \"chinstrap\")\n\ngentoo.to_excel(writer, sheet_name = \"gentoo\")\n\nwriter.save()\n```\n:::\n\n\n#### HDF5 Format\n\nHierarchical data format (HDF) is used in Python, C, Java, Julia, MATLAB, and others for storing big scientific array data (multiple datasets and metadata within one file). HDF5 can be used to efficiently read/write chunks of large arrays.\n\nThe PyTables package must first be installed.\n\n``` bash\nconda install pytables\n\npip install tables # the package is called \"tables\" in PyPI\n```\n\npandas provides an dictionary-like-class for HDF5 files called `HDFStore`:\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nstore = pd.HDFStore(\"data/pets.h5\")\n\nstore[\"pets\"] = pets_df\nstore[\"pets\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>type</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mai</td>\n      <td>cat</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tai</td>\n      <td>cat</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Skye</td>\n      <td>cat</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n`HDFStore` can store data as a `fixed` or as a `table` schema. Table allows querying but is generally slower.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\npets_df.to_hdf(\"data/petnames.h5\", \"pets\", format = \"table\")\npd.read_hdf(\"data/petnames.h5\", \"pets\", where=[\"columns = name\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mai</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tai</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Skye</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: callout-tip\n## When should I use HDF5?\n\nWes recommends using HDF5 for write-once, read-many datasets that are worked with locally. If your data is stored on remote servers, then you may try other binary formats designed for distributed storage (for example, [Apache Parquet](https://parquet.apache.org/)).\n:::\n\n### Interacting with Web APIs\n\nTo access data from APIs, Wes suggests using the [requests](http://docs.python-requests.org/) package.\n\n``` bash\nconda install requests\n```\n\nLet's pull from this free zoo animal API.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nimport requests\n\nurl = \"https://zoo-animal-api.herokuapp.com/animals/rand\"\n\nresp = requests.get(url)\n\nresp.raise_for_status()\n\nprint(\"HTTP status\", resp)\n\nanimal = resp.json()\nanimal\n\nanimal_df = pd.DataFrame([animal]) # important to wrap the dictionary object into a list\nanimal_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHTTP status <Response [200]>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latin_name</th>\n      <th>animal_type</th>\n      <th>active_time</th>\n      <th>length_min</th>\n      <th>length_max</th>\n      <th>weight_min</th>\n      <th>weight_max</th>\n      <th>lifespan</th>\n      <th>habitat</th>\n      <th>diet</th>\n      <th>geo_range</th>\n      <th>image_link</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Brazilian Porcupine</td>\n      <td>Coendou prehensilis</td>\n      <td>Mammal</td>\n      <td>Nocturnal</td>\n      <td>1.5</td>\n      <td>1.7</td>\n      <td>9</td>\n      <td>11</td>\n      <td>17</td>\n      <td>Tropical rainforest</td>\n      <td>Leaves, bark, fruits, shoots and small animals</td>\n      <td>Northern and eastern South America</td>\n      <td>https://upload.wikimedia.org/wikipedia/commons...</td>\n      <td>45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: callout-note\nIt is important to note that the dictionary is wrapped into a list. If it isn't, then you will get the following error: `ValueError: If using all scalar values, you must pass an index`.\n:::\n\n### Interacting with Databases\n\nSome popular SQL-based relational databases are: SQL Server, PostgreSQL, MySQL, SQLite3. We can use pandas to load the results of a SQL query into a DataFrame.\n\nImport sqlite3 and create a database.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nimport sqlite3\n\ncon = sqlite3.connect(\"data/data.sqlite\")\n```\n:::\n\n\nThis creates a table.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nquery = \"\"\"\n  CREATE TABLE states\n  (Capital VARCHAR(20), State VARCHAR(20),\n  x1 REAL, x2 INTEGER\n);\"\"\"\n\ncon.execute(query)\n\ncon.commit()\n```\n:::\n\n\nThis inserts the rows of data:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndata = [(\"Atlanta\", \"Georgia\", 1.25, 6), (\"Seattle\", \"Washington\", 2.6, 3), (\"Sacramento\", \"California\", 1.7, 5)]\n        \nstmt = \"INSERT INTO states VALUES(?, ?, ?, ?)\"\n\ncon.executemany(stmt, data)\n\ncon.commit()\n```\n:::\n\n\nNow we can look at the data:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ncursor = con.execute(\"SELECT * FROM states\")\n\nrows = cursor.fetchall()\n\nrows\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n[('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5),\n ('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5),\n ('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5),\n ('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5),\n ('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5),\n ('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5),\n ('Atlanta', 'Georgia', 1.25, 6),\n ('Seattle', 'Washington', 2.6, 3),\n ('Sacramento', 'California', 1.7, 5)]\n```\n:::\n:::\n\n\nTo get the data into a pandas DataFrame, we'll need to provide column names in the `cursor.description`.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nprint(cursor.description)\n\npd.DataFrame(rows, columns = [x[0] for x in cursor.description])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(('Capital', None, None, None, None, None, None), ('State', None, None, None, None, None, None), ('x1', None, None, None, None, None, None), ('x2', None, None, None, None, None, None))\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Capital</th>\n      <th>State</th>\n      <th>x1</th>\n      <th>x2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs per usual, Wes likes to show us the manual way first and then the easier version. Using [SQLAlchemy](http://www.sqlalchemy.org/), we can must less verbosely create our DataFrame.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nimport sqlalchemy as sqla\n\ndb = sqla.create_engine(\"sqlite:///data/data.sqlite\")\n\npd.read_sql(\"SELECT * FROM states\", db)\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Capital</th>\n      <th>State</th>\n      <th>x1</th>\n      <th>x2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Atlanta</td>\n      <td>Georgia</td>\n      <td>1.25</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Seattle</td>\n      <td>Washington</td>\n      <td>2.60</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Sacramento</td>\n      <td>California</td>\n      <td>1.70</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "06_notes_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}