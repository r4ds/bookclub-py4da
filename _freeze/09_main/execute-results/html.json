{
  "hash": "e51bbf968acbe44d29ca12c925937dfd",
  "result": {
    "markdown": "# 9. Plotting and Visualization\n\n## Learning Objectives\n\n::: incremental\n-   Learn about matplotlib, a package for Data Visualization in Python\n-   We are going to use matplotlib to create different type of chart in python\n:::\n\n# Introduction\n\nMaking informative visualizations is one of the most important tasks in every exploratory data analysis process and this can be done using matplotlib. It may be a part of the exploratory process---for example, to help identify outliers or needed data transformations, or as a way of generating ideas for models. For others, building an interactive visualization for the web may be the end goal. Python has many add-on libraries for making static or dynamic visualizations, but I'll be mainly focused on **matplotlib** and libraries that build on top of it.\n\n## import the matplotlib library\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n```\n:::\n\n\n::: panel-tabset\n## Demo_Dataset\n\n::: {.cell execution_count=2}\n```` { .cell-code}\n```{{python}}\n#| eval: false\ndata = np.arange(10)\n```\n\n````\n:::\n\n\n## Print\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\n\n:::\n\n::: panel-tabset\n## Code\n\n::: {.cell execution_count=4}\n```` { .cell-code}\n```{{python}}\n#| eval: false\nplt.plot(data)\n```\n\n````\n:::\n\n\n## Output\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-6-output-1.png){width=558 height=404}\n:::\n:::\n\n\n:::\n\n## We can use plt.show() function to display the plot in quarto\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nplt.show()\n```\n:::\n\n\nWhen we are in jupyter or Ipython we can use **%matplotlib notebook** so that we can display the plot in a separate plotting windows.\n\n## Customization of the visualization\n\nWhile libraries like seaborn and pandas's built-in plotting functions will deal with many of the mundane details of making plots, should you wish to customize them beyond the function options provided, you will need to learn a bit about the matplotlib API.\n\n## Figures and Subplots\n\nPlots in matplotlib reside within a Figure object. You can create a new figure with **plt.figure ()**\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfig = plt.figure()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\nIn IPython, if you first run %matplotlib to set up the matplotlib integration, an empty plot window will appear, but in Jupyter nothing will be shown until we use a few more commands such as **%matplotlib** qt and then when we type plt.show() it will then display the plot.\n\n**plt.figure** has a number of options; notably, **figsize** will guarantee the figure has a certain size and aspect ratio if saved to disk.\n\nYou can't make a plot with a blank figure. You have to create one or more subplots using add_subplot\n\n## Add Subplot\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nax1 = fig.add_subplot(2, 2, 1)\n\nax1\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<AxesSubplot:>\n```\n:::\n:::\n\n\nThis means that the figure should be 2 Ã— 2, and we're selecting the first of four subplots (numbered from 1). We can add more subplot\n\n## We can add more subplot\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nax2 = fig.add_subplot(2, 2, 2)\n\nax3 = fig.add_subplot(2, 2, 3)\n\nax2\n\nax3\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:>\n```\n:::\n:::\n\n\n## Adding axis methods to the plot\n\nThese plot axis objects have various methods that create different types of plots, and it is preferred to use the axis methods over the top-level plotting functions like plt.show(). For example, we could make a line plot with the plot method.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfig = plt.figure()\n\nax1 = fig.add_subplot(2, 2, 1)\n\nax2 = fig.add_subplot(2, 2, 2)\n\nax3 = fig.add_subplot(2, 2, 3)\n\nax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\",\nlinestyle=\"dashed\")\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-11-output-1.png){width=601 height=409}\n:::\n:::\n\n\nWe may notice output like **matplotlib.lines.Line2D** at when we are creating our visualization. matplotlib returns objects that reference the plot subcomponent that was just added. A lot of the time you can safely ignore this output, or you can put a semicolon at the end of the line to suppress the output.\n\nThe additional options instruct matplotlib to plot a black dashed line. The objects returned by fig.add_subplot here are **AxesSubplot** objects, on which you can directly plot on the other empty subplots by calling each one's instance method.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 3)\n\naxes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([[<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>],\n       [<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>]], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-12-output-2.png){width=581 height=409}\n:::\n:::\n\n\n## Basic plot with gridline\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfig = plt.figure()\nax = plt.axes()\nplt.grid(color='r')\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-13-output-1.png){width=581 height=409}\n:::\n:::\n\n\n## Scatter Plot\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nplt.style.use('_mpl-gallery')\n\n# make the data\nnp.random.seed(3)\nx = 4 + np.random.normal(0, 2, 24)\ny = 4 + np.random.normal(0, 2, len(x))\n# size and color:\nsizes = np.random.uniform(15, 80, len(x))\ncolors = np.random.uniform(15, 80, len(x))\n\n# plot\nfig, ax = plt.subplots()\n\nax.scatter(x, y, s=sizes, c=colors, vmin=0, vmax=100)\n\nax.set(xlim=(0, 8), xticks=np.arange(1, 8),\n       ylim=(0, 8), yticks=np.arange(1, 8))\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-14-output-1.png){width=221 height=225}\n:::\n:::\n\n\n## Bar Plot\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nplt.style.use('_mpl-gallery')\n\n# make data:\nnp.random.seed(3)\nx = 0.5 + np.arange(8)\ny = np.random.uniform(2, 7, len(x))\n\n# plot\nfig, ax = plt.subplots()\n\nax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7)\n\nax.set(xlim=(0, 8), xticks=np.arange(1, 8),\n       ylim=(0, 8), yticks=np.arange(1, 8))\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-15-output-1.png){width=221 height=225}\n:::\n:::\n\n\n## Box Plot\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nplt.style.use('_mpl-gallery')\n\n# make data:\nnp.random.seed(10)\nD = np.random.normal((3, 5, 4), (1.25, 1.00, 1.25), (100, 3))\n\n# plot\nfig, ax = plt.subplots()\nVP = ax.boxplot(D, positions=[2, 4, 6], widths=1.5, patch_artist=True,\n                showmeans=False, showfliers=False,\n                medianprops={\"color\": \"white\", \"linewidth\": 0.5},\n                boxprops={\"facecolor\": \"C0\", \"edgecolor\": \"white\",\n                          \"linewidth\": 0.5},\n                whiskerprops={\"color\": \"C0\", \"linewidth\": 1.5},\n                capprops={\"color\": \"C0\", \"linewidth\": 1.5})\n\nax.set(xlim=(0, 8), xticks=np.arange(1, 8),\n       ylim=(0, 8), yticks=np.arange(1, 8))\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-16-output-1.png){width=221 height=225}\n:::\n:::\n\n\n[**We can learn more with the matplotlib documentation**](https://matplotlib.org)\n\n| Argument   | Description                                                                                                  |\n|--------------|----------------------------------------------------------|\n| nrows      | Number of rows of subplots                                                                                   |\n| ncols      | Number of columns of subplots                                                                                |\n| sharex     | All subplots should use the same x-axis ticks (adjusting the xlim will affect all subplots)                  |\n| sharey     | All subplots should use the same y-axis ticks (adjusting the ylim will affect all subplots)                  |\n| subplot_kw | Dictionary of keywords passed to add_subplot call used to create each subplot                                |\n| **fig_kw** | Additional keywords to subplots are used when creating the figure, such as plt.subplots (2,2, figsize=(8,6)) |\n\n: Table.1: Matplotlib.pyplot.subplots options\n\n## Adjusting the spacing around subplots\n\nBy default, matplotlib leaves a certain amount of padding around the outside of the subplots and in spacing between subplots. This spacing is all specified relative to the height and width of the plot, so that if you resize the plot either programmatically or manually using the GUI window, the plot will dynamically adjust itself. You can change the spacing using the subplots_adjust method on Figure objects:\n\nsubplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)\n\n**wspace** and **hspace** control the percent of the figure width and figure height, respectively, to use as spacing between subplots.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\nfor i in range(2):\n    for j in range(2):\n        axes[i, j].hist(np.random.standard_normal(500), bins=50,\n                        color=\"black\", alpha=0.5)\nfig.subplots_adjust(wspace=0, hspace=0)\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-17-output-1.png){width=229 height=225}\n:::\n:::\n\n\n## **Colors, Markers, and Line Styles**\n\nmatplotlib's line `plot` function accepts arrays of x and y coordinates and optional color styling options. For example, to plot `x` versus `y` with green dashes, you would execute:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nax.plot(x, y, linestyle=\"--\", color=\"green\")\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nax = fig.add_subplot()\n\nax.plot(np.random.standard_normal(30).cumsum(), color=\"black\",\nlinestyle=\"dashed\", marker=\"o\")\n\n\nplt.show()\n```\n:::\n\n\nline plots, you will notice that subsequent points are linearly interpolated by default. This can be altered with the drawstyle option.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfig = plt.figure()\n\nax = fig.add_subplot()\n\ndata = np.random.standard_normal(30).cumsum()\n\nax.plot(data, color=\"black\", linestyle=\"dashed\", label=\"Default\");\nax.plot(data, color=\"black\", linestyle=\"dashed\",\ndrawstyle=\"steps-post\", label=\"steps-post\");\nax.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<matplotlib.legend.Legend at 0x206ad50d810>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-20-output-2.png){width=237 height=227}\n:::\n:::\n\n\n## Ticks, Labels, and Legends\n\nMost kinds of plot decorations can be accessed through methods on matplotlib axes objects. This includes methods like xlim, xticks, and xticklabels. These control the plot range, tick locations, and tick labels, respectively. They can be used in two ways:\n\n-   Called with no arguments returns the current parameter value (e.g., ax.xlim() returns the current x-axis plotting range)\n\n-   Called with parameters sets the parameter value (e.g., ax.xlim(\\[0, 10\\]) sets the x-axis range to 0 to 10)\n\n## Setting the title, axis labels, ticks, and tick labels\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nax.plot(np.random.standard_normal(1000).cumsum());\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-21-output-1.png){width=249 height=225}\n:::\n:::\n\n\nTo change the **x-axis ticks**, it's easiest to use **set_xticks** and **set_xticklabels**. The former instructs matplotlib where to place the ticks along the data range; by default these locations will also be the labels. But we can set any other values as the labels using **set_xticklabels:**\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nticks = ax.set_xticks([0, 250, 500, 750, 1000])\n\nlabels = ax.set_xticklabels([\"one\", \"two\", \"three\", \"four\", \"five\"],\nrotation=30, fontsize=8),\nax.set_title(\"My first matplotlib plot\")\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nText(0.5, 1.0, 'My first matplotlib plot')\n```\n:::\n:::\n\n\n## Adding legends\n\nLegends are another critical element for identifying plot elements. There are a couple of ways to add one. The easiest is to pass the label argument when adding each piece of the plot:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", label=\"one\");\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dashed\",\nlabel=\"two\");\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dotted\",\nlabel=\"three\");\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-23-output-1.png){width=249 height=225}\n:::\n:::\n\n\n## Print the legend\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nax.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n<matplotlib.legend.Legend at 0x206ad307220>\n```\n:::\n:::\n\n\n## Annotations and Drawing on a Subplot\n\nIn addition to the standard plot types, you may wish to draw your own plot annotations, which could consist of text, arrows, or other shapes. You can add annotations and text using the text, arrow, and annotate functions. text draws text at given coordinates (x, y) on the plot with optional custom styling:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd\n\ndf = pd.DataFrame({\"Month\":['Jan','Feb','Mar','Apr'], 'Expected':[30, 25, 50, 20],'Actual':[40, 23, 51, 17]})     \nrate_off = np.round(100-np.abs(df['Expected']/df['Actual']*100),2) \n \nfig, ax = plt.subplots(1,1)\n\n## store the plot in an object\nplots = df.plot(kind='bar', ax=ax)\n\n\n## iterating over plots.patches will return the objects for left bars, then the objects for the right bars\n## so it is best to iterate over the left and right bar objects simultaneously \nmiddle_index = len(plots.patches)//2\nfor change, left_bar, right_bar in zip(rate_off, plots.patches[:middle_index], plots.patches[middle_index:]):\n    \n    ## for expected less than actual, the annotation starts from the left bar\n    if change > 0:\n        # print(change, left_bar.get_x())\n        plots.annotate(f\"\", \n            xy=(left_bar.get_x() + left_bar.get_width() / 2, right_bar.get_height()), \n            ha='center', va='center', size=10, \n            xytext=(left_bar.get_x() + left_bar.get_width() / 2, left_bar.get_height()),\n            arrowprops=dict(arrowstyle=\"simple\", color='green', facecolor='green'))\n        ## annotate the text to the left of the bar\n        plots.annotate(f\"{change}%\", \n            xy=(left_bar.get_x() + left_bar.get_width() / 2, (left_bar.get_height() + right_bar.get_height()) / 2),\n            size=10, color='red', ha='right', va='center')\n\n    ## for expected greater than actual, the annotation starts from the right bar\n    else:\n        # print(change, right_bar.get_x())\n        plots.annotate(f\"\", \n            xy=(right_bar.get_x() + right_bar.get_width() / 2, right_bar.get_height()), \n            ha='center', va='center', size=10, \n            xytext=(right_bar.get_x() + right_bar.get_width() / 2, left_bar.get_height()),\n            arrowprops=dict(arrowstyle=\"simple\", color='red', facecolor='red'))\n        ## annotate the text to the right of the bar\n        plots.annotate(f\"{change}%\", \n            xy=(right_bar.get_x() + right_bar.get_width() / 2, (left_bar.get_height() + right_bar.get_height()) / 2),\n            size=10, color='red', ha='left', va='center')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_13436\\3172658628.py:22: UserWarning: Setting the 'color' property will override the edgecolor or facecolor properties.\n  plots.annotate(f\"\",\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_13436\\3172658628.py:35: UserWarning: Setting the 'color' property will override the edgecolor or facecolor properties.\n  plots.annotate(f\"\",\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-25-output-2.png){width=270 height=221}\n:::\n:::\n\n\n## Saving Plots to File\n\nYou can save the active figure to file using the figure object's savefig instance method. For example, to save an SVG version of a figure, you need only type:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nfig.savefig(\"figpath.png\", dpi=400)\n```\n:::\n\n\n| Argument             | Description                                                                                                                                                |\n|----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| fname                | String containing a filepath or a Python file-like object. The figure format is inferred from the file extension (e.g., `.pdf` for PDF or `.png` for PNG). |\n| dpi                  | The figure resolution in dots per inch; defaults to 100 in IPython or 72 in Jupyter out of the box but can be configured.                                  |\n| facecolor, edgecolor | The color of the figure background outside of the subplots; `\"w\"` (white), by default.                                                                     |\n| format               | The explicit file format to use (`\"png\"`, `\"pdf\"`, `\"svg\"`, `\"ps\"`, `\"eps\"`, \\...).                                                                        |\n\n: Table 9.2: Some fig.savefig options\n\n### **matplotlib Configuration**\n\nmatplotlib comes configured with color schemes and defaults that are geared primarily toward preparing figures for publication. Fortunately, nearly all of the default behavior can be customized via global parameters governing figure size, subplot spacing, colors, font sizes, grid styles, and so on. One way to modify the configuration programmatically from Python is to use the **`rc`** method; for example, to set the global default figure size to be 10 Ã— 10, you could enter:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nplt.rc(\"figure\", figsize=(10, 10))\n```\n:::\n\n\nAll of the current configuration settings are found in the **plt.rcParams dictionary**, and they can be restored to their default values by calling the **plt.rcdefaults()** function.\n\nThe first argument to **rc** is the component you wish to customize, such as **\"figure\"**, **\"axes\"**, **\"xtick\"**, **\"ytick\"**, **\"grid\"**, **\"legend\"**, or many others. After that can follow a sequence of keyword arguments indicating the new parameters. A convenient way to write down the options in your program is as a dictionary:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nplt.rc(\"font\", family=\"monospace\", weight=\"bold\", size=8)\n```\n:::\n\n\n## Plotting with pandas and seaborn\nmatplotlib can be a fairly low-level tool. You assemble a plot from its base components: the data display (i.e., the type of plot: line, bar, box, scatter, contour, etc.), legend, title, tick labels, and other annotations.\n\n## Line Plots\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ns = pd.Series(np.random.standard_normal(10).cumsum(), index=np.arange(0,\n 100, 10))\n\ns.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-29-output-2.png){width=990 height=975}\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 1)\n\ndata = pd.Series(np.random.uniform(size=16), index=list(\"abcdefghijklmnop\"))\n\ndata.plot.bar(ax=axes[0], color=\"black\", alpha=0.7)\n\ndata.plot.barh(ax=axes[1], color=\"black\", alpha=0.7)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-30-output-2.png){width=984 height=975}\n:::\n:::\n\n\n",
    "supporting": [
      "09_main_files"
    ],
    "filters": [],
    "includes": {}
  }
}