{
  "hash": "09905854fc0cbe5ac49d00754093232b",
  "result": {
    "markdown": "# 9. Plotting and Visualization\n\n## Learning Objectives\n::: {.incremental}\n- Learn about matplotlib, a package for Data Visualization in Python\n- We are going to use matplotlib to create different type of chart in python\n:::\n\n\n# Introduction\n\nMaking informative visualizations is one of the most important tasks in every exploratory data analysis process and this can be done using matplotlib.\n\n\n## import the matplotlib library\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n```\n:::\n\n\n## Demo dataset\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata = np.arange(10)\n\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\n\n## Plot \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.plot(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-4-output-1.png){width=558 height=404}\n:::\n:::\n\n\n## We can use plt.show() function to display the plot in quarto\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.show()\n```\n:::\n\n\nWhen we are in jupyter or Ipython we can use **%matplotlib notebook** so that we can display the plot in a separate plotting windows.\n\n## Customization of the visualization\n\nWhile libraries like seaborn and pandas’s built-in plotting functions will deal with many of the mundane details of making plots, should you wish to customize them beyond the function options provided, you will need to learn a bit about the matplotlib API.\n\n\n## Figures and Subplots\nPlots in matplotlib reside within a Figure object. You can create a new figure with **plt.figure ()**\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfig = plt.figure()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\nIn IPython, if you first run %matplotlib to set up the matplotlib integration, an empty plot window will appear, but in Jupyter nothing will be shown until we use a few more commands such as %matplotlib qt and then when we type plt.show() it will then display the plot.\n\nplt.figure has a number of options; notably, figsize will guarantee the figure has a certain size and aspect ratio if saved to disk.\n\nYou can’t make a plot with a blank figure. You have to create one or more subplots using add_subplot\n\n## Add Subplot\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nax1 = fig.add_subplot(2, 2, 1)\n\nax1\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<AxesSubplot:>\n```\n:::\n:::\n\n\nThis means that the figure should be 2 × 2, and we’re selecting the first of four subplots (numbered from 1). We can add more subplot\n\n## We can add more subplot\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nax2 = fig.add_subplot(2, 2, 2)\n\nax3 = fig.add_subplot(2, 2, 3)\n\nax2\n\nax3\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:>\n```\n:::\n:::\n\n\n## Adding axis methods to the plot\nThese plot axis objects have various methods that create different types of plots, and it is preferred to use the axis methods over the top-level plotting functions like plt.show(). For example, we could make a line plot with the plot method.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfig = plt.figure()\n\nax1 = fig.add_subplot(2, 2, 1)\n\nax2 = fig.add_subplot(2, 2, 2)\n\nax3 = fig.add_subplot(2, 2, 3)\n\nax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\",\nlinestyle=\"dashed\")\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-9-output-1.png){width=581 height=409}\n:::\n:::\n\n\nWe may notice output like <matplotlib.lines.Line2D at …> when we are creating our visualization. matplotlib returns objects that reference the plot subcomponent that was just added. A lot of the time you can safely ignore this output, or you can put a semicolon at the end of the line to suppress the output.\n\nThe additional options instruct matplotlib to plot a black dashed line. The objects returned by fig.add_subplot here are AxesSubplot objects, on which you can directly plot on the other empty subplots by calling each one’s instance method.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 3)\n\naxes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([[<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>],\n       [<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>]], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-10-output-2.png){width=581 height=409}\n:::\n:::\n\n\n## Basic plot with gridline\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfig = plt.figure()\nax = plt.axes()\nplt.grid(color='r')\n```\n\n::: {.cell-output .cell-output-display}\n![](09_main_files\\figure-html/cell-11-output-1.png){width=581 height=409}\n:::\n:::\n\n\n",
    "supporting": [
      "09_main_files"
    ],
    "filters": [],
    "includes": {}
  }
}